$handle_color: get-color(neutral, 900);

// ACF Flexible Content Heading
.acf-fc-layout-handle {
  padding-left: get-size(1.5) !important;
  background: $handle_color !important;
  color: $color-white !important;
  font-weight: bold;

  .swatch {
    // Hugs the left side of the acf-handle and shows the user what bg colour is selected
    width: get-size(1);
    display: inline-block;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    border-right: 1px solid rgba(255, 255, 255, 0.5);
  }
}

// Removes borders from groups with class seamless applied
.acf-field-group {
  &.seamless {
    .acf-fields {
      border: 0;
      margin-left: n(get-size(0.75));
      margin-right: n(get-size(0.75));
      .-table & {
        margin-left: n(get-size(0.5));
        margin-right: n(get-size(0.5));
      }
    }
  }
}

.acf-field-repeater {
  &.seamless {
    .acf-table {
      border: 0;
      background: none;
      thead {
        display: none;
      }
      tr:first-of-type {
        td {
          padding-top: 0;
        }
      }
      tr:last-of-type {
        td {
          padding-bottom: 0;
        }
      }
      td {
        border: 0;
        background: none !important;
      }
    }
  }
}

// Nicer styling of handle icons
.acf-fc-layout-controls .acf-icon {
  background: $color-white !important;
  &:hover {
    background-color: get-color(primary) !important;
    border-color: get-color(primary);
    color: choose-contrast-color(
      get-color(primary),
      $color-white,
      $handle_color
    );
  }
  &.-minus:hover {
    background-color: get-color(error) !important;
    border-color: get-color(error);
    color: choose-contrast-color(get-color(error), $color-white, $handle_color);
  }
  &.-plus:hover {
    background-color: get-color(success) !important;
    border-color: get-color(success);
    color: choose-contrast-color(
      get-color(success),
      $color-white,
      $handle_color
    );
  }
}

.acf-input label {
  font-size: 1em;
}

.acf-handle-right {
  .dashicons {
    opacity: 0.4;
  }
  font-weight: normal;
  position: absolute;
  left: 70%;
  display: inline-block;
  border-left: 1px solid rgba(255, 255, 255, 0.5);
  padding-left: get-size(0.75);
}

#poststuff .acf-postbox .hndle {
  font-size: 1.2em; // header tab of ACF group
}

.acf-field {
  &.spacer {
    * {
      display: none;
    }
  }
  .acf-input > p.description {
    // Description below input field
    margin-top: get-size(0.75);
  }
}

.acf-tab-button {
  // Fix dashicon size in tabs
  .dashicons {
    font-size: 15px;
    height: 15px;
    width: 15px;
    margin-top: get-size(0.25);
  }
}

// Wrap a button group in .swatches and use a span with class .swatch for the button to make the buttons appear as block colours
.swatches {
  label {
    padding: 0;
    border: 0;
    margin-right: get-size(0.5);
    border-radius: 0px !important;
    &.selected {
      border: 0 !important;
      background: none !important;
      .swatch {
        border: 3px solid #1e8cbe !important;
      }
    }
    &:hover {
      .swatch {
        border: 1px solid #1e8cbe !important;
      }
    }
  }
  .swatch {
    width: get-size(2);
    height: get-size(2);
    display: block;
    box-sizing: border-box;
    border-radius: 6px !important;
    border: 1px solid #eee;
  }
}

// Nicer formatting for button group with icons
.acf-has-icons {
  .acf-button-group {
    min-width: get-size(8);
    label {
      text-align: left;
    }
  }
}

// Hide Settings Cog from field group headers
.postbox-header .acf-hndle-cog {
  display: none !important;
  visibility: hidden !important;
}

// Allow Flex Wrap
.acf-button-group {
  flex-wrap: wrap;
  label {
    flex: 0;
  }
}

// Flexible Layout Options into a two column layout
.acf-fc-popup ul {
  flex-direction: row;
  width: 300px;
  flex-wrap: wrap;
  display: flex;
  .dashicons {
    opacity: 0.4;
  }
  li {
    flex: 0 0 50%;
    &:nth-of-type(even) {
      border-right: 1px solid rgba($color-white, 0.2);
      box-sizing: border-box;
    }
    // Stacks
    &:first-of-type() {
      order: 1;
      border-top: 1px solid rgba($color-white, 0.2);
      flex: 0 0 100%;
      .dashicons {
        margin-right: 0.2em;
      }
    }
  }
}

.acf-block-disabled {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.4);
  //border: 2px dashed red;
  box-sizing: border-box;
  pointer-events: none;
  .ui-sortable > & {
    display: none;
  }
}

// More easy to see repeaters
.acf-repeater {
  .acf-row:nth-of-type(even) {
    .acf-row-handle {
      background-color: #eee;
    }
    td {
      background-color: #f9f9f9;
      .acf-fields {
        background: transparent;
      }
    }
  }
}

@keyframes blinking-text {
  from {
    color: red;
  }
  to {
    color: blue;
  }
}

.column-acf-json strong {
  // Make the "Sync Available" really obvious.
  color: red;
  font-size: 1.4em;
  animation: blinking-text 1s linear infinite;
}

%flexible-content-description {
  display: block;
  position: relative;
  background: #f9f9f9;
  padding: 10px 10px 0px 10px;
  color: #666;
  //font-size: font-size(-1)
}
