.block-cover {
  padding: 0 !important;
  .button-list {
    margin-bottom: 0;
  }
}

.cover-container {
  position: relative;
  padding: get-size(3) 0 get-size(3) - $element-margin 0;
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
  &.bg-is-fixed {
    background-attachment: fixed;
  }
  h2 {
    @each $point, $size in $cover-heading {
      @if $point == "root" {
        // Root font size at smallest device width
        font-size: $size;
      } @else {
        // Otherwise use the breakpoint map to set the font size
        @include above($point) {
          font-size: $size;
        }
      }
    }
  }
  .block-title {
    margin-bottom: get-size(1);
  }
  .button-list {
    margin-top: get-size(3);
  }
  &.has-overlay::before {
    @include pseudo;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    top: 0;
    left: 0;
  }
  &.is-width-normal {
    padding-left: get-size(2);
    padding-right: get-size(2);
  }
  &.is-width-small {
    // Mimics as if it were a md-10 lg-8 column
    margin-left: auto;
    margin-right: auto;
    padding-left: get-size(2);
    padding-right: get-size(2);
    @include above(md) {
      width: 83.33333333%;
    }
    @include above(lg) {
      width: 66.66666667%;
    }
  }
  &.is-width-full {
    padding-left: get-size(2);
    padding-right: get-size(2);
    @include above(md) {
      padding-left: get-size(3);
      padding-right: get-size(3);
    }
    @include above(lg) {
      padding-left: get-size(4);
      padding-right: get-size(4);
    }
  }
  .is-wide & {
    padding-left: get-size(2);
    padding-right: get-size(2);
    @each $point, $i in $breakpoints {
      // for each breakpoint defined...
      @include above($point) {
        $container-width: map-deep-get($breakpoints, $point, "container-width");
        $container-gutter: map-deep-get(
          $breakpoints,
          $point,
          "container-gutter"
        );

        // If container is 100% wide set the padding to half of the gutter
        @if $container-width == 100% {
          @if $container-gutter {
            padding-left: h($container-gutter);
            padding-right: h($container-gutter);
          }
        } @else {
          $padding: calc((100vw-#{$container-width}) / 4);
          padding-left: $padding;
          padding-right: $padding;
        }
      }
    }
  }
}

.block-cover .container.is-wide {
  width: 100% !important;
  padding: 0 !important;
  max-width: 100% !important;
}

.overlay-white::before {
  background-color: #fff;
}
.overlay-black::before {
  background-color: #000;
}

@for $i from 1 through 100 {
  @if $i % 10 == 0 {
    .overlay-opacity-#{$i}::before {
      opacity: $i * 0.01;
    }
  }
}

.cover-text {
  @each $point, $size in $cover-text {
    @if $point == "root" {
      // Root font size at smallest device width
      font-size: $size;
    } @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
  line-height: 1.2;
}
