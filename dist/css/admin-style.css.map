{"version":3,"sources":["../../../node_modules/jellyfish-ui/src/scss/jellyfish/01-tools/_functions.scss","../project/02-settings/_02-breakpoints.scss","../admin/_acf.scss","admin-style.css","../admin/_bg-colors.scss","../../../node_modules/jellyfish-ui/src/scss/jellyfish/02-settings/_02-colors.scss","../project/07-components/_debug-flag.scss","../admin/_tinymce.scss"],"names":[],"mappings":"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","file":"admin-style.css","sourcesContent":["// Convert px to em\n@use \"sass:math\";\n\n@function em($pixels) {\n  @return #{math.div($pixels, 16px)}em;\n}\n\n// Get a value from deep inside a map. Arguments:\n// $map - name of map\n// $keys - name of keys to retrieve. This can work with an infinitely nested map\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n    @if not $map {\n      //@warn \"`#{$key}` does not exist in the queried key.\"; // Redacted as this is not super useful, because we only have one key value and not the parent key\n    }\n  }\n  @return $map;\n}\n\n// Test if map has all `$keys` nested with each others\n// @author Hugo Giraudel\n// @link https://www.sitepoint.com/extra-map-functions-sass/\n// @param {Map} $map - Map\n// @param {Arglist} $keys - Keys to test\n// @return {Bool}\n@function map-has-nested-keys($map, $keys...) {\n  @each $key in $keys {\n    @if not map-has-key($map, $key) {\n      @return false;\n    }\n    $map: map-get($map, $key);\n  }\n  @return true;\n}\n\n@function get-color($base, $shade: 500) {\n  @if map-has-nested-keys($colors, $base, $shade) {\n    $color: map-get(map-get($colors, $base), $shade);\n    @return $color;\n  } @else {\n    @error \"Key: '#{$base}', Value: '#{$shade}' not found in $colors map. Cancelling compile.\";\n  }\n}\n\n@function font-size($size) {\n  @if map-has-key($type-scale, $size) {\n    $font-size: map-get($type-scale, $size);\n    @return $font-size;\n  } @else {\n    @error \"Key: '#{$size}' not found in $type-scale map. Cancelling compile.\";\n  }\n}\n\n@function get-size($size) {\n  @if map-has-key($sizing-system, $size) {\n    $return-size: map-get($sizing-system, $size);\n    @return $return-size;\n  } @else {\n    @error \"Key: '#{$size}' not found in $sizing-system map. Cancelling compile.\";\n  }\n}\n\n// Returns a given number divided by 2\n@function h($num) {\n  @return $num * 0.5;\n}\n\n// Returns the negative value of a given number\n@function n($num) {\n  @return -$num;\n}\n\n// Returns the negative and halved value of a given number\n@function nh($num) {\n  @return n(h($num));\n}\n@function hn($num) {\n  @return n(h($num));\n}\n\n// Lighten a colour progressively, much better than lighten()\n@function tint($color, $percentage) {\n  @return mix($color, white, $percentage);\n}\n\n// Darken a colour progressively, much better than darken()\n@function shade($color, $percentage) {\n  @return mix($color, black, $percentage);\n}\n\n// Allows us to use #{headings(1,6)} to apply css to all headings\n@function headings($from: 1, $to: 6) {\n  @if $from == $to {\n    @return 'h#{$from}';\n  } @else {\n    @return 'h#{$from},' + headings($from + 1, $to);\n  }\n}\n\n/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796\n */\n@function luminance($color) {\n  $red: nth($linear-channel-values, red($color) + 1);\n  $green: nth($linear-channel-values, green($color) + 1);\n  $blue: nth($linear-channel-values, blue($color) + 1);\n\n  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;\n}\n\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796\n */\n@function calculate-contrast($back, $front) {\n  $backLum: luminance($back) + 0.05;\n  $foreLum: luminance($front) + 0.05;\n\n  @return math.div(max($backLum, $foreLum), min($backLum, $foreLum));\n}\n\n/**\n * Determine whether to use dark or light text on top of given color.\n */\n@function choose-contrast-color($color, $light-color: $color-white, $dark-color: $color-text) {\n  $lightContrast: calculate-contrast($color, $light-color);\n  $darkContrast: calculate-contrast($color, $dark-color);\n  @if ($force-color-contrast-ratio == false) {\n    @if ($lightContrast < 4.5 and $darkContrast < 4.5) {\n     // @warn \"Neither #{$light-color} (#{$lightContrast}) nor #{$dark-color} (#{$darkContrast}) has a significant contrast to #{$color} to reach WCAG 2.1 AA compliance (4.5:1). Consider using a different colour. Alternatively set $force-color-contrast-ratio to true to have SASS take care of things.\";\n    }\n  }\n  @if ($force-color-contrast-ratio == true) {\n    @if ($lightContrast < 4.5 and $darkContrast < 4.5) {\n      // Let's try again, but this time we'll set the colors to black and white to try to force the accessibility.\n\n      $light-color-was: $light-color;\n      $lightContrast-was: $lightContrast;\n\n      $dark-color-was: $dark-color;\n      $darkContrast-was: $darkContrast;\n\n      $light-color: #fff;\n      $dark-color: #000;\n      $lightContrast: calculate-contrast($color, $light-color);\n      $darkContrast: calculate-contrast($color, $dark-color);\n      //@warn \"To meet WCAG 2.1 AA guidelines, Sass has calculated new contrast ratios for background color #{$color}. #{$light-color-was} (#{$lightContrast-was}) is now #{$light-color} (#{$lightContrast}) and #{$dark-color-was} (#{$darkContrast-was}) is now #{$dark-color} (#{$darkContrast}).\";\n    }\n  }\n\n  @if ($lightContrast > $darkContrast) {\n    //@warn \"The best contrast against #{$color} is light, which is #{$light-color}.\";\n    @return $light-color;\n  } @else {\n    // @warn \"The best contrast against #{$color} is dark, which is #{$dark-color}.\";\n    @return $dark-color;\n  }\n}\n","/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*\n  Breakpoints are defined here\n  Note: Comment out or remove a whole size to prevent it being iterated,\n  or individual elements to inherit from the previously defined point.\n  The shorthand names are used in column and modifier classes.\n  breakpoint, container-width and col-gutter are the only !required values.\n  Sensible breakpoint values @link https://www.freecodecamp.org/news/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862/\n*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n$breakpoints: (\n  sm: (\n    breakpoint: 600px,\n    container-width: 100%,\n    container-gutter: 90px,\n    col-gutter: 20px,\n    root-font-size: 15px,\n    root-line-height: 1.48,\n  ),\n  md: (\n    breakpoint: 900px,\n    container-width: 90%,\n    container-max-width: 1140px,\n    container-gutter: 0px,\n    col-gutter: 30px,\n    root-font-size: 16px,\n    root-line-height: 1.5,\n  ),\n  lg: (\n    breakpoint: 1200px,\n    container-width: 1140px,\n    container-max-width: none,\n    col-gutter: 35px,\n    root-line-height: 1.6,\n  ),\n  xl: (\n    breakpoint: 1800px,\n    container-width: 1280px,\n    col-gutter: 40px,\n  ),\n);\n","$handle_color: get-color(neutral, 900);\n\n// ACF Flexible Content Heading\n.acf-fc-layout-handle {\n  padding-left: get-size(1.5) !important;\n  background: $handle_color !important;\n  color: $color-white !important;\n  font-weight: bold;\n\n  .swatch {\n    // Hugs the left side of the acf-handle and shows the user what bg colour is selected\n    width: get-size(1);\n    display: inline-block;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-right: 1px solid rgba(255, 255, 255, 0.5);\n  }\n}\n\n// Removes borders from groups with class seamless applied\n.acf-field-group {\n  &.seamless {\n    .acf-fields {\n      border: 0;\n      margin-left: n(get-size(0.75));\n      margin-right: n(get-size(0.75));\n      .-table & {\n        margin-left: n(get-size(0.5));\n        margin-right: n(get-size(0.5));\n      }\n    }\n  }\n}\n\n.acf-field-repeater {\n  &.seamless {\n    .acf-table {\n      border: 0;\n      background: none;\n      thead {\n        display: none;\n      }\n      tr:first-of-type {\n        td {\n          padding-top: 0;\n        }\n      }\n      tr:last-of-type {\n        td {\n          padding-bottom: 0;\n        }\n      }\n      td {\n        border: 0;\n        background: none !important;\n      }\n    }\n  }\n}\n\n// Nicer styling of handle icons\n.acf-fc-layout-controls .acf-icon {\n  background: $color-white !important;\n  &:hover {\n    background-color: get-color(primary) !important;\n    border-color: get-color(primary);\n    color: choose-contrast-color(\n      get-color(primary),\n      $color-white,\n      $handle_color\n    );\n  }\n  &.-minus:hover {\n    background-color: get-color(error) !important;\n    border-color: get-color(error);\n    color: choose-contrast-color(get-color(error), $color-white, $handle_color);\n  }\n  &.-plus:hover {\n    background-color: get-color(success) !important;\n    border-color: get-color(success);\n    color: choose-contrast-color(\n      get-color(success),\n      $color-white,\n      $handle_color\n    );\n  }\n}\n\n.acf-input label {\n  font-size: 1em;\n}\n\n.acf-handle-right {\n  .dashicons {\n    opacity: 0.4;\n  }\n  font-weight: normal;\n  position: absolute;\n  left: 70%;\n  display: inline-block;\n  border-left: 1px solid rgba(255, 255, 255, 0.5);\n  padding-left: get-size(0.75);\n}\n\n#poststuff .acf-postbox .hndle {\n  font-size: 1.2em; // header tab of ACF group\n}\n\n.acf-field {\n  &.spacer {\n    * {\n      display: none;\n    }\n  }\n  .acf-input > p.description {\n    // Description below input field\n    margin-top: get-size(0.75);\n  }\n}\n\n.acf-tab-button {\n  // Fix dashicon size in tabs\n  .dashicons {\n    font-size: 15px;\n    height: 15px;\n    width: 15px;\n    margin-top: get-size(0.25);\n  }\n}\n\n// Wrap a button group in .swatches and use a span with class .swatch for the button to make the buttons appear as block colours\n.swatches {\n  label {\n    padding: 0;\n    border: 0;\n    margin-right: get-size(0.5);\n    border-radius: 0px !important;\n    &.selected {\n      border: 0 !important;\n      background: none !important;\n      .swatch {\n        border: 3px solid #1e8cbe !important;\n      }\n    }\n    &:hover {\n      .swatch {\n        border: 1px solid #1e8cbe !important;\n      }\n    }\n  }\n  .swatch {\n    width: get-size(2);\n    height: get-size(2);\n    display: block;\n    box-sizing: border-box;\n    border-radius: 6px !important;\n    border: 1px solid #eee;\n  }\n}\n\n// Nicer formatting for button group with icons\n.acf-has-icons {\n  .acf-button-group {\n    min-width: get-size(8);\n    label {\n      text-align: left;\n    }\n  }\n}\n\n// Hide Settings Cog from field group headers\n.postbox-header .acf-hndle-cog {\n  display: none !important;\n  visibility: hidden !important;\n}\n\n// Allow Flex Wrap\n.acf-button-group {\n  flex-wrap: wrap;\n  label {\n    flex: 0;\n  }\n}\n\n// Flexible Layout Options into a two column layout\n.acf-fc-popup ul {\n  flex-direction: row;\n  width: 300px;\n  flex-wrap: wrap;\n  display: flex;\n  .dashicons {\n    opacity: 0.4;\n  }\n  li {\n    flex: 0 0 50%;\n    &:nth-of-type(even) {\n      border-right: 1px solid rgba($color-white, 0.2);\n      box-sizing: border-box;\n    }\n    // Stacks\n    &:first-of-type() {\n      order: 1;\n      border-top: 1px solid rgba($color-white, 0.2);\n      flex: 0 0 100%;\n      .dashicons {\n        margin-right: 0.2em;\n      }\n    }\n  }\n}\n\n.acf-block-disabled {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.4);\n  //border: 2px dashed red;\n  box-sizing: border-box;\n  pointer-events: none;\n  .ui-sortable > & {\n    display: none;\n  }\n}\n\n// More easy to see repeaters\n.acf-repeater {\n  .acf-row:nth-of-type(even) {\n    .acf-row-handle {\n      background-color: #eee;\n    }\n    td {\n      background-color: #f9f9f9;\n      .acf-fields {\n        background: transparent;\n      }\n    }\n  }\n}\n\n@keyframes blinking-text {\n  from {\n    color: red;\n  }\n  to {\n    color: blue;\n  }\n}\n\n.column-acf-json strong {\n  // Make the \"Sync Available\" really obvious.\n  color: red;\n  font-size: 1.4em;\n  animation: blinking-text 1s linear infinite;\n}\n\n%flexible-content-description {\n  display: block;\n  position: relative;\n  background: #f9f9f9;\n  padding: 10px 10px 0px 10px;\n  color: #666;\n  //font-size: font-size(-1)\n}\n","/**\n * Calculate the luminance for a color.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796\n */\n/**\n * Calculate the contrast ratio between two colors.\n * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796\n */\n/**\n * Determine whether to use dark or light text on top of given color.\n */\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*\n  Breakpoints are defined here\n  Note: Comment out or remove a whole size to prevent it being iterated,\n  or individual elements to inherit from the previously defined point.\n  The shorthand names are used in column and modifier classes.\n  breakpoint, container-width and col-gutter are the only !required values.\n  Sensible breakpoint values @link https://www.freecodecamp.org/news/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862/\n*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n.acf-fc-layout-handle {\n  padding-left: 24px !important;\n  background: #30373e !important;\n  color: #ffffff !important;\n  font-weight: bold;\n}\n.acf-fc-layout-handle .swatch {\n  width: 16px;\n  display: inline-block;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-right: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.acf-field-group.seamless .acf-fields {\n  border: 0;\n  margin-left: -12px;\n  margin-right: -12px;\n}\n.-table .acf-field-group.seamless .acf-fields {\n  margin-left: -8px;\n  margin-right: -8px;\n}\n\n.acf-field-repeater.seamless .acf-table {\n  border: 0;\n  background: none;\n}\n.acf-field-repeater.seamless .acf-table thead {\n  display: none;\n}\n.acf-field-repeater.seamless .acf-table tr:first-of-type td {\n  padding-top: 0;\n}\n.acf-field-repeater.seamless .acf-table tr:last-of-type td {\n  padding-bottom: 0;\n}\n.acf-field-repeater.seamless .acf-table td {\n  border: 0;\n  background: none !important;\n}\n\n.acf-fc-layout-controls .acf-icon {\n  background: #ffffff !important;\n}\n.acf-fc-layout-controls .acf-icon:hover {\n  background-color: #554994 !important;\n  border-color: #554994;\n  color: #ffffff;\n}\n.acf-fc-layout-controls .acf-icon.-minus:hover {\n  background-color: #be2d2d !important;\n  border-color: #be2d2d;\n  color: #ffffff;\n}\n.acf-fc-layout-controls .acf-icon.-plus:hover {\n  background-color: #19c945 !important;\n  border-color: #19c945;\n  color: #30373e;\n}\n\n.acf-input label {\n  font-size: 1em;\n}\n\n.acf-handle-right {\n  font-weight: normal;\n  position: absolute;\n  left: 70%;\n  display: inline-block;\n  border-left: 1px solid rgba(255, 255, 255, 0.5);\n  padding-left: 12px;\n}\n.acf-handle-right .dashicons {\n  opacity: 0.4;\n}\n\n#poststuff .acf-postbox .hndle {\n  font-size: 1.2em;\n}\n\n.acf-field.spacer * {\n  display: none;\n}\n.acf-field .acf-input > p.description {\n  margin-top: 12px;\n}\n\n.acf-tab-button .dashicons {\n  font-size: 15px;\n  height: 15px;\n  width: 15px;\n  margin-top: 4px;\n}\n\n.swatches label {\n  padding: 0;\n  border: 0;\n  margin-right: 8px;\n  border-radius: 0px !important;\n}\n.swatches label.selected {\n  border: 0 !important;\n  background: none !important;\n}\n.swatches label.selected .swatch {\n  border: 3px solid #1e8cbe !important;\n}\n.swatches label:hover .swatch {\n  border: 1px solid #1e8cbe !important;\n}\n.swatches .swatch {\n  width: 32px;\n  height: 32px;\n  display: block;\n  box-sizing: border-box;\n  border-radius: 6px !important;\n  border: 1px solid #eee;\n}\n\n.acf-has-icons .acf-button-group {\n  min-width: 128px;\n}\n.acf-has-icons .acf-button-group label {\n  text-align: left;\n}\n\n.postbox-header .acf-hndle-cog {\n  display: none !important;\n  visibility: hidden !important;\n}\n\n.acf-button-group {\n  flex-wrap: wrap;\n}\n.acf-button-group label {\n  flex: 0;\n}\n\n.acf-fc-popup ul {\n  flex-direction: row;\n  width: 300px;\n  flex-wrap: wrap;\n  display: flex;\n}\n.acf-fc-popup ul .dashicons {\n  opacity: 0.4;\n}\n.acf-fc-popup ul li {\n  flex: 0 0 50%;\n}\n.acf-fc-popup ul li:nth-of-type(even) {\n  border-right: 1px solid rgba(255, 255, 255, 0.2);\n  box-sizing: border-box;\n}\n.acf-fc-popup ul li:first-of-type() {\n  order: 1;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  flex: 0 0 100%;\n}\n.acf-fc-popup ul li:first-of-type() .dashicons {\n  margin-right: 0.2em;\n}\n\n.acf-block-disabled {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.4);\n  box-sizing: border-box;\n  pointer-events: none;\n}\n.ui-sortable > .acf-block-disabled {\n  display: none;\n}\n\n.acf-repeater .acf-row:nth-of-type(even) .acf-row-handle {\n  background-color: #eee;\n}\n.acf-repeater .acf-row:nth-of-type(even) td {\n  background-color: #f9f9f9;\n}\n.acf-repeater .acf-row:nth-of-type(even) td .acf-fields {\n  background: transparent;\n}\n\n@keyframes blinking-text {\n  from {\n    color: red;\n  }\n  to {\n    color: blue;\n  }\n}\n.column-acf-json strong {\n  color: red;\n  font-size: 1.4em;\n  animation: blinking-text 1s linear infinite;\n}\n\n.bg-white {\n  background-color: #ffffff;\n}\n\n.bg-primary-500 {\n  background-color: #554994;\n}\n\n.bg-secondary-500 {\n  background-color: #cf447c;\n}\n\n.bg-gray {\n  background-color: #6e7c8c;\n}\n\n.dev-flag {\n  position: fixed;\n  display: block;\n  line-height: 1;\n  font-size: 1.5em;\n  bottom: 150px;\n  right: 0;\n  padding: 0.5em;\n  font-weight: bold;\n  z-index: 99999999;\n  margin: 0;\n  display: block;\n  transform-origin: center;\n  transform: translate3d(50%, -50%, 0) rotate(270deg) translateY(-50%);\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.25);\n  border: 3px solid black;\n  border-bottom: 0;\n}\n.dev-flag.dev {\n  background-color: #FF0000;\n  color: white;\n}\n.dev-flag.staging {\n  background-color: rgb(255, 208, 0);\n  color: black;\n}\n\n#mceu_71 {\n  background: #fff;\n  border: 1px solid #ddd;\n  box-shadow: inset 0 1px 1px -1px rgba(0, 0, 0, 0.2);\n  padding: 2px 3px;\n}\n#mceu_71:hover {\n  border-color: #b4b9be;\n}\n#mceu_71 .mce-txt {\n  font-size: 13px;\n}","@each $name, $color in $background-colors {\n  // Loop through $theme-colors map and create classes for .bg-*\n  .bg-#{$name} {\n    background-color: $color;\n  }\n}\n\n// Set up default colors for button-group swatches\n// No need to create all utility classes by adding them to the $background-colors map if not used in the theme\n.bg-gray {\n  background-color: get-color(neutral);\n}\n","// Create empty maps. This allows the maps to be defined in the project's settings file to override and add any colors as required\n$colors: () !default;\n$theme-colors: () !default;\n$background-colors: () !default;\n\n$colors: map-merge(\n  (\n    primary: makeColorPalette(#554994),\n    secondary: makeColorPalette(#cf447c),\n    neutral: makeColorPalette(hsl(211, 12%, 49%)),\n    success: makeColorPalette(#19c945),\n    warning: makeColorPalette(#ddac24),\n    error: makeColorPalette(#be2d2d),\n  ),\n  $colors\n);\n\n$color-white: #ffffff !default;\n$color-black: get-color(neutral, 1000) !default;\n\n// Merge default colours into the map\n// Values can either be a string that matches a key from the $colors map, or a valid CSS value\n$theme-colors: map-merge(\n  (\n    'primary': 'primary',\n    'secondary': 'secondary',\n    'success': 'success',\n    'warning': 'warning',\n    'error': 'error',\n  ),\n  $theme-colors\n);\n\n// Merge colors from $colors map into $background-colors if 'bg' is set to 'true'\n@each $color-name, $color-pallette in $colors {\n  @if map-get($color-pallette, 'bg') == 'true' {\n    @each $key, $val in $color-pallette {\n      @if $key == 'bg' {\n        // DO NOTHING\n      }\n      @else {\n        $background-colors: map-merge(\n          (\n            #{$color-name}-#{$key}: $val,\n          ),\n        $background-colors\n        );\n      }\n    }\n  }\n}\n\n// Merge default colours into the map\n$background-colors: map-merge(\n  (\n    'white': $color-white,\n  ),\n  $background-colors\n);\n\n$color-text: $color-black !default;\n$color-headings-preferred: get-color(neutral, 1000) !default;\n",".dev-flag {\n  // Shows a dev flag on the local development website\n  position: fixed;\n  display: block;\n  line-height: 1;\n  font-size: font-size(3);\n  bottom: 150px;\n  right: 0;\n  padding: .5em;\n  font-weight: bold;\n  z-index: 99999999;\n  margin: 0;\n  display: block;\n  transform-origin: center;\n  transform: translate3d(50%,-50%,0) rotate(270deg) translateY(-50%);\n  box-shadow:0 0 8px 0 rgba(0,0,0,.25);\n  border: 3px solid black;\n  border-bottom: 0;\n  &.dev {\n    background-color: #FF0000;\n    color: white;\n  }\n  &.staging {\n    background-color: rgb(255, 208, 0);\n    color: black;\n  }\n}\n","#mceu_71 {\n  // Styles the 'Formats' drop down\n  background: #fff;\n  border: 1px solid #ddd;\n  box-shadow: inset 0 1px 1px -1px rgba(0,0,0,.2);\n  padding: 2px 3px;\n  &:hover {\n    border-color: #b4b9be;\n  }\n  .mce-txt {\n    font-size: 13px;\n  }\n}\n"]}